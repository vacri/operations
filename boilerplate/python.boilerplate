#!/usr/bin/env python3

""" boilerplate with my preferred logging, arg format, and usage
"""


import sys
import os
import argparse
import textwrap
import logging
## add this line if we start using common in-house libs
#sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), 'lib'))


log = logging.getLogger(os.path.basename(sys.argv[0]))
log.setLevel(logging.DEBUG)


def get_options():
    """ ... gets... options?
    """

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''

            Usage:
              USAGE LINE GOES HERE

            PROSE GOES HERE
        '''))

    parser.add_argument('MANDATORY_ARG', help='', default='help')
    parser.add_argument('-O', '--OPTIONAL-ARG', help='', default='us-east-1')
    parser.add_argument('-B', '--BOOLEAN', help='', action='store_true')
    parser.add_argument('-q', '--quiet', help='sets loglevel=ERROR, good for cron', action='store_true')
    parser.add_argument('--loglevel', help='', default='INFO')
    parser.add_argument('--debug', help='overrides other loglevels', action='store_true')

    options = parser.parse_args()

    try:
        options.loglevel = getattr(logging, options.loglevel.upper())
    except:
        print("Loglevel %s unrecognised, setting to INFO" % options.loglevel)
        options.loglevel = 20
    finally:
        if options.quiet:
            options.loglevel = logging.ERROR
        if options.debug:
            print("logging set to debug")
            options.loglevel = logging.DEBUG

    #print(vars(options))

    return options



def main():
    """ ... main?
    """

    options = get_options()

    formatter = logging.Formatter('%(levelname)s: %(message)s')
    log_handler = logging.StreamHandler()
    log_handler.setLevel(options.loglevel)
    log_handler.setFormatter(formatter)
    log.addHandler(log_handler)

    log.info("let's go!")
    log.debug(options)



    log.info("Done.")

if __name__ == '__main__':
    main()
